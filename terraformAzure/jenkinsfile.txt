pipeline{
    agent any
    parameters{
     /*   string (name: 'azure_subscription_id', description: '')
        string (name: 'azure_client_id', description: '')
        password (name: 'azure_client_secret', description: '')
		string (name: 'azure_tenant_id', description: '')
		*/string (name: 'storage_account_name', description: 'storage account  name to store and retrive terraform state file')
        string (name:'jenkins_user', description: '')
         password (name:'jenkins_password', description: '')
       /* string (name: 'sonar_user', description: '')
        password (name: 'sonar_password', description: '')
        string (name: 'gitlab_user', description: '')
        password (name: 'gitlab_password', description: '')
        string (name: 'nexus_user', description: '')
        password (name: 'nexus_password', description: '')
	*/	}
	environment {
        AZURE_SUBSCRIPTION_ID = "cf97669a-b8a4-471e-b5b7-5f96bf875432"
        AZURE_CLIENT_ID="cd00171f-e88e-49e2-9b87-8fdc6c71d776"
		AZURE_CLIENT_SECRET="4ed3bcfe-0969-434d-9afc-8f59ac226938"
        AZURE_Tenant_ID="c160a942-c869-429f-8a96-f8c8296d57db"
	    dir = "$currentBuild.number"
	    dirkey = "key"+"-"+"$currentBuild.number"
    }
stages{
   stage('git pull'){
             steps{
		        git credentialsId: 'git', url: 'https://github.com/saurabhsonje/azure-linux.git'
              /*  sh '''
                echo $WORKSPACE
                cp -r /Release-orchestrator/* $WORKSPACE/
                ''' */
            }
			}

    stage('persistent_stage'){
            steps{
                script{
                def tfHome = tool name:'Terraform'
                env.PATH = "${tfHome}:${env.PATH}"
                //def ansHome = tool name:'Ansible'
              //  env.PATH = "${ansHome}:${env.PATH}
                }
                sh '''
                
                terraform -version
				
                az --version
				
				'''
                //az login --service-principal -u $AZURE_CLIENT_ID --password "MyServicePrincipal1" --tenant "c160a942-c869-429f-8a96-
               // azureCLI commands: [[exportVariablesString: '', script: 'az -version']], principalCredentialId: 'Azure_principal'                                                            
                //az commands: [[exportVariablesString: '', script: 'az login']], principalCredentialId: 'azureserviceprincipalid'
                
                  sh '''
                  cd $WORKSPACE/terraformAzure/VPC
                  echo "hello"
                  terraform init -backend-config backend-azurerm/storage.tf -reconfigure
                  echo "one "
                  terraform validate
                  terraform apply -auto-approve 
                  ''' 
            }
    }
stage('jenkins'){
            steps{
                 sh '''
                   cd $WORKSPACE/terraformAzure/Jenkins/
                   terraform init -backend-config backend-azurerm/storage.tf -reconfigure 
                   terraform apply -auto-approve
                   
                   terraform output public_ip > jenkins_public_ip
                   '''
				   
script{              // sudo chmod -R a+rw /var/jenkins_home/workspace/Azure_ToolChainProvisioner
                       env.jenkins_public_ip = readFile('terraform/jenkins/jenkins_public_ip').trim()
                       echo "${jenkins_public_ip}"
                 
		    }
		 sleep(time:60,unit:"SECONDS")
                 dir('ansible')
                 {
                  sh 'sed -i "s/<JENKINS_IP>/"${jenkins_public_ip}"/g" hostazure'
                  sh '''
                        sed -i "s/<JENKINS_USER>/"${jenkins_user}"/g" roles/jenkins/vars/main.yml
                        sed -i "s/<JENKINS_PASSWORD>/"${jenkins_password}"/g" roles/jenkins/vars/main.yml
                        export ANSIBLE_HOST_KEY_CHECKING=False
                        ansible-playbook -i hostazure jenkins.yaml -u azureuser --extra-vars 'ansible_ssh_pass=test@1234'
                  '''
                 }
                 echo "Jenkins_URL = http://${jenkins_public_ip}:8080"
                }
              }
        
stage('Nexus'){
            steps{
                 sh '''
                   cd $WORKSPACE/terraformAzure/Nexus/
                   terraform init -backend-config backend-azurerm/storage.tf -reconfigure 
                   terraform plan
                   terraform validate
                   terraform apply -auto-approve
                   '''
                   }
         }
stage('Sonarqube'){
            steps{
                 sh '''
                   cd $WORKSPACE/terraformAzure/Sonarqube/
                   terraform init -backend-config backend-azurerm/storage.tf -reconfigure 
                   terraform plan
                   terraform validate
                   terraform apply -auto-approve
                   '''
                   }
         }
 stage('Gitlab'){
            steps{
                 sh '''
                   cd $WORKSPACE/terraformAzure/Sonarqube/
                   terraform init -backend-config backend-azurerm/storage.tf -reconfigure 
                   terraform plan
                   terraform validate
                   terraform apply -auto-approve
                   '''
                   }
         }
}
  }
